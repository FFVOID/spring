package com.museum.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.museum.dto.ItemImgDto;
import com.museum.dto.ItemSearchDto;
import com.museum.dto.NewItemDto;
import com.museum.entity.Item;
import com.museum.entity.ItemImg;
import com.museum.repository.ItemImgRepository;
import com.museum.repository.ItemRepository;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
@Transactional
public class ItemService {
	
	private final ItemRepository itemRepository;
	private final ItemImgService itemImgService;
	private final ItemImgRepository itemImgRepository;
	
	public Long saveItem(NewItemDto newItemDto, List<MultipartFile> itemImgFileList) throws Exception {
		
		//소장품 등록
		Item item = newItemDto.createItem(); //dto -> entity
		itemRepository.save(item); //저장
		
		//이미지 등록
		for(int i=0; i<itemImgFileList.size(); i++) {
			
			ItemImg itemImg = new ItemImg();
			itemImg.setItem(item);
			
			if(i == 0) {
				itemImg.setRepimgYn("Y");
			} else {
				itemImg.setRepimgYn("N");
			}
			
			itemImgService.saveItemImg(itemImg, itemImgFileList.get(i));
		}
		
		return item.getId();
	}
	
	//소장품 가져오기
	@Transactional(readOnly = true)
	public NewItemDto getItemDtl(Long itemId) {
		
		List<ItemImg> itemImgList = itemImgRepository.findByItemIdOrderByIdAsc(itemId);
		
		List<ItemImgDto> itemImgDtoList = new ArrayList<>();
		for(ItemImg itemImg : itemImgList) {
			ItemImgDto itemImgDto = ItemImgDto.of(itemImg);
			
			itemImgDtoList.add(itemImgDto);
		}
		
		Item item = itemRepository.findById(itemId)
								  .orElseThrow(EntityNotFoundException::new);
		
		NewItemDto newItemDto = NewItemDto.of(item);
		
		newItemDto.setItemImgDtoList(itemImgDtoList);
		
		return newItemDto;
	}
	
	//수정
	public Long updateItem(NewItemDto newItemDto, List<MultipartFile> itemImgFileList) throws Exception {
		
		Item item = itemRepository.findById(newItemDto.getId())
								 	.orElseThrow(EntityNotFoundException::new);
		
		
		
		//★update쿼리문 실행 => 한번 insert를 진행하면 엔티티가 영속성 컨텍스트에 저장이 되므로 
		//그 이후에는 변경감지 기능이 동작하기 때문에 개발자는 update쿼리문을 쓰지 않고 엔티티만 변경해주면 된다
		item.updateItem(newItemDto);
		
		List<Long> itemImgIds = newItemDto.getItemImgIds();
		
		for(int i = 0; i<itemImgFileList.size(); i++) {
			itemImgService.updateItemImg(itemImgIds.get(i), itemImgFileList.get(i));
		}
		
		return item.getId();
	}
	
	
	@Transactional(readOnly = true)
	public Page<Item> getAdminItemPage(ItemSearchDto itemSearchDto, Pageable pageable){
		Page<Item> itemPage = itemRepository.getAdminItemPage(itemSearchDto, pageable);
		return itemPage;
	}
}
