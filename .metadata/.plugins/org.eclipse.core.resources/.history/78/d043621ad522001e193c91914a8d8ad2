package com.museum.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.museum.dto.ItemSearchDto;
import com.museum.dto.NewItemDto;
import com.museum.entity.Item;
import com.museum.service.ItemService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class AdminController {
	
	private final ItemService itemService;
	
	@GetMapping(value = "/admin/exhibitionList")
	public String exhibitionList() {
		return "admin/exhibitionList";
	}
	
	@GetMapping(value = "/admin/newEx")
	public String newEx() {
		return "admin/newEx";
	}
	
	//소장품 등록 페이지
	@GetMapping(value = "/admin/newItem")
	public String newItem(Model model) {
		model.addAttribute("newItemDto", new NewItemDto());
		return "admin/newItem";
	}
	
	//상품,이미지 등록
	@PostMapping(value = "/admin/newItem")
	public String itemNew(@Valid NewItemDto newItemDto, BindingResult bindingResult, Model model, 
		@RequestParam("itemImgFile") List<MultipartFile> itemImgFileList ) {
			
			if(bindingResult.hasErrors()) {
				return "admin/newItem";
			}
			
			if(itemImgFileList.get(0).isEmpty()) {
				model.addAttribute("errorMessage", "첫번째 소장품 이미지는 필수 입니다");
				return "admin/newItem";
			}
			
			try {
				itemService.saveItem(newItemDto, itemImgFileList);
			} catch (Exception e) {
				e.printStackTrace();
				model.addAttribute("errorMessage" , "상품 등록 중 에러가 발생했습니다");
			}
			
			return "redirect:/";
		}
	
	//상품관리페이지
	@GetMapping(value = {"/admin/itemList", "/admin/itemList/{page}"})
	public String itemManage(ItemSearchDto itemSearchDto, @PathVariable("page") Optional<Integer> page, Model model) {
		
		Pageable pageable = PageRequest.of(page.isPresent() ? page.get() : 0 , 5);
		
		Page<Item> itemList = itemService.getAdminItemPage(itemSearchDto, pageable);
		
		model.addAttribute("itemList", itemList);
		model.addAttribute("itemSearchDto", itemSearchDto);
		model.addAttribute("maxPage", 5);
		
		return "/admin/itemList";
		
	}
	
	//수정할 소장품의 저장된 정보를 불러옴
	@GetMapping(value = "/admin/item/{itemId}")
	public String itemDtl(@PathVariable("itemId") Long itemId, Model model) {
		
		try {
			NewItemDto newItemDto = itemService.getItemDtl(itemId);
			model.addAttribute("newItemDto", newItemDto);
		} catch (Exception e) {
			e.printStackTrace();
			
			model.addAttribute("errorMessage", "소장품정보를 가져오는중 에러가 발생했습니다");
			model.addAttribute("newItemDto", new NewItemDto());
			
			return "admin/newItem";
		}
		
		return "admin/itemModify";
	}
	
	//소장품 수정페이지
	@PostMapping(value = "/admin/item/{itemId}")
	public String itemUpdate(@Valid NewItemDto newItemDto, Model model, BindingResult bindingResult,
			@RequestParam("itemImgFile") List<MultipartFile> itemImgFileList) {
		
		if(bindingResult.hasErrors()) {
			return "item/newItem";
		}
		
		if(itemImgFileList.get(0).isEmpty() || newItemDto.getId() == null) {
			model.addAttribute("errorMessage","첫번째 소장품 이미지는 필수입니다");
			return "item/newItem";
		}
		
		try {
			itemService.updateItem(newItemDto, itemImgFileList);
		} catch (Exception e) {
			e.printStackTrace();
			model.addAttribute("errorMessage", "소장품 수정 중 에러가 발생했습니다");
			return "item/newItem";
		}
		
		return "redirect:/";
		
	}
   	
}
